Principais formas de gerar log nos scripts.
Gerar a saida de erro para um arquivo de log?
./PrimeiroScript.sh > log.out   GERA UM ARQUIVO NOVO ,APAGANDO TUDO QUE EXISTIA NO ANTERIOR
./PrimeiroScript.sh >> log.out FAZ UM APPEND NO ARQUIVO , ANEANDO NO FINAL DELE

######DELETAR E/OU REMOVER TODOS OS DOCKERS###########
Passo a passo
Para todas as instâncias
docker stop $(docker ps -a -q)

Remove todas as instâncias
docker rm $(docker ps -a -q)

Para todas as imagens
docker image rm $(docker image ls -a -q)

Para todos os volumes
docker volume prune
#####################################################

COMANDO TEE --> COM SAIDA DE TELA
./BuscaAluno.sh | tee -a log.out
ls -l | tee -a log.out

Para descompactar o arquivo tar.gz, digite o seguinte:
tar xvzf arquivo.tar.gz
Vamos analisar essa sintaxe. Aqui está o que cada parâmetro nesse comando significa:
x: Esta opção diz ao tar para extrair os arquivos.
v: A saída detalhada mostra todos os arquivos sendo extraídos.
z: Diz ao tar para descompactar o arquivo usando gzip.
f: Este deve ser o último sinalizador do comando. Ele informa ao tar o nome e o caminho do arquivo compactado.
Como descompactar um arquivo tar.gz para um diretório diferente
Para descompactar o arquivo tar.gz e colocar os arquivos resultantes em um diretório diferente, digamos /tmp/ archive, você precisa adicionar uma opção -C no final do comando:
tar xvzf arquivo.tar.gz -C /tmp/ archive



sudo dpkg -l |grep vim




######### MOSTRA QUAL BASH VOCÊ ESTA USANDO ################
echo $0
#########  O CAMINHO DO BASH ##############################
ec2-user:~/environment/Udemy/ShellScript $ echo $SHELL
/bin/bash
############################################################
EXEMPLO QUE CADA USUÁRIO TEM A SUA ÁREA DE BIN BASH
###########################################################
ec2-user:~/environment/Udemy/ShellScript $ tail /etc/passwd
ec2-user:x:1000:1000:EC2 Default User:/home/ec2-user:/bin/bash

ec2-user:~ $ cd -  ####Volta ao diretorio anterios
/home/ec2-user/environment/Udemy/ShellScript
$HOME → Variavel de Ambiente que mostra o seu diretorio de Home

ec2-user:~/environment/Udemy/ShellScript $ cd ../../../
ec2-user:~ $ cd   ##### mais o espaço vai para o diretorio home
ec2-user:~ $ cd ~ ###vai para o home
/bin - importante aplicativos binários
/boot - arquivos de configuração do boot , kernels, e outros arquivos necessários durante o período do boot.
/dev - os arquivos do dispositivo
/etc - arquivos de configuração, scripts de inicialização, etc.
/home - diretórios home para diferentes usuários
/initrd - usado quando está criando um processo de boot initrd personalizado
/lib - bibliotecas de sistema
/lost+found - fornece um sistema perdido+achado para arquivos que existem sob o diretório root (/).
/media - monta ( carrega ) automaticamente partições em seu disco rigido ou mídia removivel como CDs, câmeras digitais, etc.
/mnt - sistema de arquivos montado manualmente em seu disco rigido.
/opt - fornece um local opcional para aplica
/proc - diretório dinâmico especial que mantem informação sobre o estado do sistema, incluindo os processos atualmente executados.
/root - diretório home do usuário root, pronuciado "eslash-ruut"
/sbin - binários de sistema importantes.
/srv - pode conter arquivos que são servidos para outros sistemas
/sys - arquivos de sistema
/tmp - arquivos temporários
/usr - aplicativos e arquivos que são na maioria das vezes disponíveis ao acesso de todos usuários
/var - arquivos variáveis tal como logs e bancos de dados

O comando “shutdown”
-H, –halt: Para a máquina.
-P, –poweroff: Desliga a máquina (o padrão).
-r, –reboot: Reinicia a máquina.
-c: cancela um encerramento pendente. Assim, ele pode ser usado para cancelar o efeito de uma chamada de desligamento com um argumento de tempo que não seja “+0” ou “now”

ec2-user:~ $ cd ~(usuario x)  ###vai para o home de um usuario especifico
whatis (comando) → exibe dicas do comando ou oque ele faz 

joseivan@debian:~$ ps
	PID TTY      	TIME CMD
   1542 pts/0	00:00:00 bash
   1544 pts/0	00:00:00 ps
joseivan@debian:~$ ps -axu   
ps axu|more  ---> vai dar mais detalhes dos processos que estão rodando

joseivan@debian:~$ echo "shell script"
shell script
joseivan@debian:~$ echo -n "shell script"  ---> não vai fazer a quebra de linha no console
shell scriptjoseivan@debian:~$

joseivan@debian:~$ echo -e "shell\t script"  --> reconhece os caracteres especiais exemplo tab ou new line
shell     script

joseivan@debian:~$ mkdir -p diretorio3/diretorio4  --> força criar toda a arvore de diretorios

joseivan@debian:~$ rm -r diretorio3 --> remover diretorios usa-se o 'r' para forçar é recursivo
rmdir só remove um diretório se le estiver vazio

rm -f arquivo.txt  -->força a remoção do arquivo,se ele não existir não da mensagem de erro, se existir ele deleta

sleep(tempo em seg) fica aguardando o tempo estipulado o console responder

cat arquivo.txt  —> vai exibir o conteúdo do arquivo no console
cat -b arquivo.txt  → vai numerar as linhas não numera as linhas em branco
.cat -n arquivo.txt →numera todas as linhas
cat -A arquivo.txt → mostra os caracteres especiais que não aparecem
cat –help

head arquivo.txt → mostra as primeiras 10 linhas por padrão
head arquivo.txt -n3 ou -3 → mostra qtd de linhas que quero
head arquivo.txt -c10   → mostra os primeiros 10 caracteres do arquivo
tac arquivo.txt → ele lê de baixo para cima o arquivo
tail arquivo_longo.txt → exibe as ultimas linhas qde um arquivo longo
tail arquivo -n5 ou -5_longo.txt → exibe qtd das ultimas linha de um arquivo longo
tail -n5 alunos2.txt → exibe as 5 primeiras linhas do arquivo
tail -n5 alunos2.txt | wc -w →coloca um pilline no meio, ele fica como entrada do outro argumento , exibe a quantidade de linhas.
wc alunos.txt → exibe linhas -  palavras - caracteres
wc - l arquivo.txt → número de linhas
wc -w arquivo.txt → número de palavras
wc -m ou wc -c → números de letras
wc alunos* → vai contar de todos os arquivos que tem algum nome parecido com aluno
tail /etc/passwd |sort -k3 -t”:” → explico para o sort que o delimitador é “:”
tail /etc/passwd |sort -k3 -t”:” -g → com -g ele considera algarismo como numerico
uniq alunos.txt → exibe somente palavras unicas, não repete, se as repetidas estiverem na sequencia
sort alunos.txt  → ordena o arquivo na ordem alfabetica
sort -r alunos.txt  → ordena na ordem reversa
sort -k2 alunos.txt → ordena pelo segundo campo de cada linha
sort alunos.txt |uniq → melhor pratica fazer primeiro um sor , depois um uniq
sort alunos.txt |uniq -u → mostra só as linhas que não estão repetidas só as que apareceram 1 vez
sort alunos.txt |uniq -d → mostra somente as linhas que estão duplicadas
sort alunos.txt |uniq -c → conta/exibe a quantidade das ocorrencias
sort alunos.txt |unic -c |sort → ordena, conta os unicos, ordena depois
sort alunos.txt |unic -c |sort -r → ordena, conta os unicos,, sorteia em modo reverso
sort alunos.txt |unic -c |sort -r |head -n1 → só o cabeçalho a primeira linha.
cat alunos.txt |tr a e → troca as palavras que tem ‘a’ pela letra ‘e’ 
cat alunos.txt| tr a-z A-Z → troca todas as letras minusculas para maiusculas
cat alunos.txt| tr aei AEI → troca aei por AEI
cat alunos.txt| tr ‘ ‘ ‘\t’ → troca todos os espaços por TAB
cat alunos.txt| tr  -s ‘\t’ → transforma varios TABS em um sóS
cat alunos.txt| tr d aei → deleta todas as letras com aei do arquivo
echo “Curso Shell Script” | tr l L → troca o l por L
echo “Curso Shell Script” | tr -s ‘l’ → coloca só um l evita a repetição
echo Curso Shell Script | [:lower:] [:upper:] → lowercase vai ficar uppercase
cat alunos2.txt | cut -c1-5 → vai cortar os caracteres e exibir só de 1 a 5
cat alunos2.txt | cut -c1,2,3 → só os caracteres 1, 2, e 3.
cat alunos2.txt | cut -c1,2,5 → só caracteres 1, 2, e 5.
cat alunos2.txt | cut -c5-  → a partir do caracter 5
cat alunos2.txt | cut -c1,2,10-  → 1, 2, e a partir do caracter 10
cat alunos2.txt | cut -d” “ -f1 → separa por campos “fields” , falo que o delimitador é espaço e escolho o campo 1
cat alunos2.txt | cut -d” “ -f1 → campo 1 e o campo 3 quando existir
tail /etc/passwd | cut -d”:” -f1,5 → delimitador “:” campo 1 e campo 5
diff alunos.txt alunos3.txt → mostra a diferença de dois arquivos
diff -w alunos.txt alunos3.txt → mostra a diferença ignora os espaços em bramco
diff -r arquivos arquivos-copia → mostra a diferença de dois arquivos o ‘r’ é de recursivo

grep Claudia alunos.txt → procura a palavra Claudia no arquivo alunos.txt
grep Claudia alunos* → procura a palavra Claudia em todos os arquivos com alunos.
grep “Claudia Mazzo” alunos* → procura a palavra Claudia em todos os arquivos com alunos,precisa colocar as aspas quando são palavras conjugadas.
grep -i RICARDO alunos* → Tira o case sensitive e vai achar independente das maiusculas e minusculas
grep -c Ana alunos.txt → Conta quantas ocorrências tem da palavra Ana.
grep -v Ana alunos.txt → Não mostra linhas que contem a palavra Ana, não deleta só a palavra, deleta toda a linha.
grep -r Ana* →Pesquisa em todo o diretório se existe a palavra Ana
grep -rl Ana* → Mostra o mesmo , mas só exibe o nome dos arquivos , não exibe a saida.
grep -A3 Carlos alunos.txt → Mostra tres linha após ele encontrar a palavra Carlos . ‘A’ de After.
grep -B3 Carlos alunos.txt → Mostra tres linha antes de ele encontrar a palavra Carlos . ‘B’ de Before.
grep / fgrep /egrep  → grep: expressões regulares simples , fgrep não usa expressões regulares, egrep usa expressões regulares. O fgrep é mais leve, se puder usar prefira sempre ele.

sed ‘1,3 d’ texto.txt → deleta da linha 1 até a linha 3 do documento
sed ‘/Raphael/d’ texto.txt →procura todas as ocorrencias de Raphael e deleta do texto.
cat alunos.txt |sed ‘s/Paulo/João/’--> Vai substituir o nome Paulo pelo nome João.
echo "Curso Linux Shell Script Linux" | sed 's/Linux/Unix/' → substitui a primeira ocorrencia pelo segundo nome
echo "Curso Linux Shell Script Linux" | sed 's/Linux/Unix/g' → coloca-se ‘g’ de global aí ele substitui todas as ocorrências
echo "Curso Linux Shell Script Linux" | sed 's/Linux/Unix/g' 
echo "Curso Linux Shell Script Linux" | sed 's/ //g' → Substitui os espaços por nada, simplesmente elimina os espaços

more e less são parecidos , mas o less tem mais opções : 
Opções do less: 
/algum texto  → pesquisa a occorrencia ‘de cima para baixo’ , quando ele achar , para navegar pelas ocorrencias: n vaia para proxima ocorrencia. N vai para a ococrencia anterior
?algum texto  → pesquisa a occorrencia ‘de baixo para cima’
q → sair do less ou do more 
cat -A arquivo_longo.txt | less →controlo a saida do meu arquivo ,paginando ele de forma que consigo ler paginando.

find ./ -name alunos.txt → find a partir do meu diretorio atual por nome, tudo que tiver aluno.txt
find ./ -name 'alunos*'  → tudo que iniciar com o nome alunos
find ./ -name ‘*alunos*’ --> tudo que estive com inicio meio ou fim alunos

####EXECUTA UM LS -L EM CADA UM DOS ARQUIVOS ENCONTRADOS#######
./alunos.txt
./alunos2.txt
./alunos3.txt
ec2-user:~/environment/Udemy/ShellScript $ find ./ -name 'alunos*' -exec ls -l {} \;
-rw-rw-r-- 1 ec2-user ec2-user 207 Mar 10 22:06 ./alunos.txt
-rw-r--r-- 1 ec2-user ec2-user 260 Mar 11 14:18 ./alunos2.txt
-rw-r--r-- 1 ec2-user ec2-user 245 Mar 11 14:19 ./alunos3.txt

ec2-user:~/environment/Udemy/ShellScript $ date → Mostra a data e hora do sistema
ec2-user:~/environment/Udemy/ShellScript $ date +%d/%m  → exibe dia e mês

seq 10 → exibe sequencia de 1 a 10
seq 0 12 → exibe sequencia de 0 a 12
seq 0 2 30 → 2 a 30 com intervalo de 2

############     OPERAÇOES MATEMATICAS ##################################
expr 5 + 2    expr 5 - 2   expr 5 / 2   expr 5 \* 2  → Na multiplicação tem de colocar a barra Porque o asterisco é um caracter protegido no Shell
echo 1+2 | bc  → outra forma é usar bc , que faz operaçoes matematicas pela entrada
echo '(1+2)*5' | bc → operaçoes com multiplicacao protege sinal com aspas

#######        COMANDOS SEQUENCIAIS               ###################
date ; echo Linux ; ls  → São separados por ‘;’ vai exibir a data depois a mensagem Linux e depois listar os arquivos do diretório

ls alunos.txt && echo Linux → Usando o ‘&&’ se der erro no primeiro comando ele não executa o segundo. 
ls alunos.txt2 || echo Linux → Usando o ‘||’ se der erro no primeiro comando ele tenta executar o segundo, se o primeiro der certo ele não faz o segundo
cd ..;ls -l → exemplo comando sequencial , muda um diretorio acima e lista.
(cd ..;ls -l) → o mesmo de cima , só que exibe o diretorio superior , mas vc não sai do pwd.

#####  REDIRECIONAMENTO DE SAIDAS    ###############
 cat alunos.txt > alunos-temp.txt → coloca o conteudo de alunos.txt em alunos-temp.txt
date > alunos-temp.txt → se dou um comando novamente ele vai subscrever tudo que tinha
date >> alunos-temp.txt → a solução é colocar o sinal de maior duas vezes
##########  REDIRECIONAMENTO SAIDA DE ERRO ################
ls -l alunos.txt3 2> log.out → redirecioanmento de erro tem de colocar o ‘2>’  ou ‘2>>’
ls -l alunos.txt3 > log.out 2> log-error.out → se der certo vai escrever em log.out, se der errado escreve em log-error.out
ls -l alunos.txt3 > log.out 2>&1→ para o mesmo arquivo , redireciona com o ‘&’ para a saida padrao 1
ls -l alunos.txt3 >> log.out 2>&1 → O mesmo só que acrescenta ao final da linha
ls -l alunos.txttxt 2>> /dev/null → Vc pode jogar para lugar nenhum, como no exemplo.
#############REDIRECIONAMENTO DE ENTRADAS ##############
cat alunos.txt |tr a-z g → exmplo direciono a entrada e troco algumas letras dela
tr 'a-d' Z < alunos.txt → O sinal de menor é o redirecionamento de entrada , pode ser feito assim.

######### VARIAVEIS NO SHELL   ##########################################
env | less → Para ver as variaveis que foram carragadas no ambiente
set | less  → Tambem mostra as variaveis de ambiente
$HOME → É só colocar um ‘$’ na frente do nome da variavel que vemos o seu resultado
VARIAVEL=valor → Declara a variavel assim
echo $VARIAVEL → exibindo
CURSO="Curso de Shell Script" → declarar variavel com espaçes e caracteres especiais
echo $$ → Vê o PID do processo atual que o bash está usando
ps axu|grep bash → Vê todos os processo que esta sendo usado
export TESTE → exporta a variavel para outras sessões filhas do bash
HORA=`date +%H` → Coloca a hora na variavel.OBS: Fica no meio do sinal de crase
MINUTO=$(date +%M) → Outra forma de inicializar a variavel
 echo $HORA:$MINUTO → EXIBE HORA:MINUTO
env set → diferença entre env e set , o env só reconhece as variáveis locais, o set reconhece as variáveis locais e as exportadas
env |grep HORA → só funciona depois que faz : export HORA
export VAR1=valor → Pode ja inicializar a variavel e ja fazer o export.

###########   USOS DAS ASPAS NO SHELL  ################
AS ‘ “ ‘ aspas duplas protege todos os caracteres menos ( $  ` / ) cifrão, crase e barra simples
As aspas simples protegem tudo até estes caracteres acima.

VIM EDITOR
MODO NAVEGACAO =>
Ctrl + F →Pagina para cima  Ctrl + B → PAGINA PARA BAIXO

MODO INSERSÃO=> Digita I  — SAIR DO MODO INSERÇÃO= ESC

MODO DE COMANDO => digita :
:1 →Primeira Linha
:$ → Ultima Linha
:! ls /tmp → dá um comando no bash e depois retorna ao editor
 OPCOES DE BUSCA =>
/Linux → Procura de cima para baixo  ,  n vai buscando o proximo de cima para baixo, N vai buscar de baixo para cima
?Linux → Procura de baixo para cima
REMOVER LINHAS =>
dd →remove uma linha → na verdade ele recorta
d4d → remove 4 linhas  → na verdade é um recorte
COLAR =>
p → coloca o cursor na linha, ele cola o que foi cortado na linha abaixo
yy → copia a linha , depois coloca p, que ele cola na linha abaixo.
y5y → copia 5 linhas , depois pode colocar com o cursor onde quer colocar
:set ts=4 → Setar tabulação no vim 4 espaços
:%s/\t/  /g →substitui TAB por espaço 
:retab → substitui TAB por espaço 
Para indentar um arquivo inteiro no vim, basta digitar o comando gg=G.
Para evitar isso, utilize o comando gg=G'' ou gg=G``. O primeiro volta para a mesma linha que o usuário estava ao executar o comando, e o segundo volta para a mesma posição (mesma linha e mesma coluna).


######File Globbing X Regex ########################
file globbing é uma forma que o bash tem de selecionar arquivos e diretorios que voc~e deseja.aLGUNS COMANDO DO lINUX
O regex seleciona um padrão de texto que você quer ou um conteúdo específico.No grep find
ls -l aula* → exemplo mostra todos os arquivos e diretórios  que começam com aula
ls -l aula[1234] → retorna o que tem aula seguido dos números 1,2,3 ou 4
ls -l aula[1-4] → retorna o mesmo do 1 ao 4
ls -l aul[Aa][1234] → aula com ultimo a maiusculo ou minusculo seguido de 1 ao 4
ls -l *11  OU ls -l {aula,AULA}11 → vai achar tudo que tiver 11 no final ou aula11 AULA11
ls -la aula1? → exige que tenha um caracter depois do 1 , se não existir não será exibido
ls -la aula1?? → duas interrogações exige dois caracteres depois da palavra.
ls -lh aula.txt → Mostra o tamanho do arquivo
ls -ltr aula.txt → Mostra o tamanho preciso

#########     expressoes regulares               ############################
egrep Linux texto.txt → toda vez que encontrar a palavra ele mostra a linha inteira
egrep --color Linux texto.txt →  assim vai colocar a cor em destaque se não estiver setado
egrep --color “[Ll]inux” texto.txt → Se o começo vai ser l minúsculo ou maiúsculo
egrep "b[aei]g" texto.txt → tudo que inicia com b tenha um a e ou i e termine com g.
egrep --color "b[a-g]g" texto.txt → de a até g
egrep "^Linux" texto.txt →  a linha inicia com Linux
egrep "^#" texto.txt → tudo que inicia com #
egrep -v "^#" texto.txt → tudo menos o #
egrep "Linux$" texto.txt → sempre que existir a palavra no final da linha
egrep --color "b[a-i]g*" texto.txt → o asterisco em REGEX quer dizer que pode ser ou não ser, então o g pode estar no final mas também pode não estar
egrep --color "b[a-i]g+" texto.txt → o + ao final diz que o caracter anterior ao sinal tem de ocorrer pelo menos uma vez.
egrep --color "b[a-i]g?" texto.txt → o caracter anterior pode aparecer nenhuma ou apenas uma vez
egrep "O.Linux" texto.txt → qualquer letra que estiver no meio das palavras O , Linux
O ‘ . ‘ é um caracter se quiser mais é só colocar mais pontos.
egrep "O.*Linux" texto.txt → entre o ‘O’ e ‘Linux’ pode existir qualquer coisa
egrep "[Ll]inux." texto.txt → Aqui exibe qualquer caracter depois de Linux pode ser até espaço
egrep "[Ll]inux\." texto.txt  → protejo o ponto com uma \ para dizer que ele não faz parte da expressão regular, o uso da \ é muito importante para dizer que um código especial não faz parte da expressão regular
sed '/^#/d' texto.txt → vai deletar tudo que começar com #
sed 's/[Ll]inux/Unix/g' texto.txt → Substitui tudo que tiver Linux por Unix , o g no final é para dizer que é uma expressão global
##############PERMISSOES DE USUARIOS NOS ARQUIVOS#########
chmod +x (arquivo)→ Permissao a todos membros executar arquivo. Usuario, grupo e outros
chmod u+x (arquivo)→ Permissão só ao usuario execussão
chmod 777 (arquivo) → todos alterar , ler e executar
chmod 744 (arquivo) →  Só o usuário tem permissão de executar
./MeuprimeiroScript → Executa o script
source MeuprimeiroScript →Também executa o shellscript
Quando executa o script ele abre um outro bash , a forma de ele executar no bash atual é usar o source;
. PrimeiroScrip.sh → O ponto na frente também executa no bash atual.
bash . PrimeiroScrip.sh → também pode fazer chamando o bash.
###### FAZENDO UM PATH PROPRIO ##########
PATH="$PATH:/home/ec2-user/environment/CursoShellScript/Scripts"
Depois que fecha a janela do shell , some estas propriedade que form colocadas no PATH
vi ~/.profile → tentar editar o profile e colocar o PATH NOVO

############VARIÁVEIS ##########
DATAHORA=$(date +%H:%M)  →quando crio a variável não coloco sifrão
$DATAHORA → Qdo chamo no programa coloco o sifrão.

############# CODIGO DE SAÍDAS#########
Podem ser de 0 a 256 
0 é um sucesso o restante é tratado pelo desenvolvedor.
 echo $? → para ver o código de erro
exit 10 → sai do script e manda o código de exit 10

#######  LER VARIAVEIS DE ENTRADA #########
read NOME → Aguarda ser digitada uma variável 
read VAR1 VAR2 VAR3 → Aguarda digitar três variáveis separadas por espaços
read -p "Digite a sua variavel:" VAR1 → Opção -p coloca o prompt e a seguir a variavel
read -s CODIGO → Não mostra oque esta sendo digitado

###########EXERCICIO LER A MEMORIA E O USO DELA#############
ShellScript/Scripts/ $ uname -o → mais opcoes mostra informacoes do Hardware
free → Mostra a quantidade de memoria RAM geralmente a opcao -h mostra em MB
cat /proc/meminfo → São arquivos virtuais que contêm informações dinâmicas sobre o kernel e o sistema
vmstat →opção -s, apresenta as estatísticas de uso da memória como o comando proc. Aqui está um exemplo
top → Mostra o uso por processo em real time
lastlog -u usuario → último login do usuário

######### For exemplos ################################
 for numero in 1 2 3 4 5
> do
> echo "Onumero é $numero"
 for sequencia in $(seq 5 10)
> do echo "O numero é  $sequencia"
> done
for sequencia in {5..10}
> do
> echo "O numero é $sequencia"
> done
for((i=5;i<=20;i++))
> do
> echo $i
> done
############   IFS Internal Separator Field ##################
set | grep IFS → Variável interna do bash separador dos campos
OLDIFS=$IFS →Fazendo backup do IFS
IFS=$‘\’n’ TROCA O ifs PADRÃO E MODIFICA PARA UMA QUEBRA DE LINHA
IFS=$OLDIFS → Tem de voltar depois ao antigo padrão IFS ,pois outros aplicativos também utilizam
ps axu | wc -l → conta quantos processos estão rodando
usa o /etc/login.defs arquivo que vem no ubuntu que tem as definições de usuário
echo /home/* → Mostra todos os usuários que usam a pasta home , usuarios do sistema

9/7/2023
--foi criado o arquivo Dockerfile
docker build -t servidor .
apt install -y rsyslog
---Ver o status do servidor
systemctl status rsyslog  --> deu esta mensagem (bash: systemctl: command not found)

docker commit DockerimageID ubuntuapache
docker commit alp1 alpine:macoratti
docker commit 60d3fe7345a9 94daced675fc

root@7e5b9d881be1:/# cd /etc/rsyslog.d/  --. aonde fica as suas configurações de log

docker commit -a "Author Name" -m "Commit message" container-id/container-name new-image-name
bash: systemctl: command not found

root@d0685341807b:/# apt install locate --> instalando o locate
root@d0685341807b:/# updatedb --> é necesario atualizar a base de dados para reconhecer o comando

root@d0685341807b:/# which vim -->mosttra o caminho dos arquivos executaveis ou apps
só consegui instalar no Ubuntu QDO EXECUTEI ISTO: apt-get install bsdmainutils

root@d0685341807b:/# history -->Lista os ultimos mil comandos digitados
root@d0685341807b:/# apt-get install man-db --> Instalar whatis command
whatis cal --> mosta um resumo doque o comando faz
root@d0685341807b:/# apropos time --> mostra os comandos relacionados com time
##########ver rsyslog dependendo da sua versão do Linux##############

@joseivangeraldo ➜ /var $ ls -ltr  --> lista (t) time stamp (r) reverse order
@joseivangeraldo ➜ /var $ ls -l /tmp

@joseivangeraldo ➜ /var/log $ ls
@joseivangeraldo ➜ /var/log $ ls -ltr

@joseivangeraldo ➜ /var/log $ tail -f alternatives.log 
@joseivangeraldo ➜ /var/log $ grep -i [true*] fontconfig.log